{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HUAWEI\\\\visual_programming\\\\dz08\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// CommentsApp.js\nimport { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentsApp() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [optimisticComments, setOptimisticComments] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [nextCommentId, setNextCommentId] = useState(501);\n  useEffect(() => {\n    async function loadComments() {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments?_limit=100');\n        if (!response.ok) {\n          throw new Error('Failed to load comments');\n        }\n        const commentsData = await response.json();\n        setComments(commentsData);\n        setOptimisticComments(commentsData);\n        const maxCommentId = commentsData.reduce((max, comment) => Math.max(max, comment.id), 0);\n        setNextCommentId(maxCommentId + 1);\n      } catch (error) {\n        if (error instanceof Error) {\n          setErrorMessage(error.message);\n        } else {\n          setErrorMessage('An unknown error occurred');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    loadComments();\n  }, []);\n  const calculatePostId = commentIndex => {\n    return Math.floor((commentIndex - 1) / 5) + 1;\n  };\n  const handleAddComment = async newCommentData => {\n    const temporaryId = nextCommentId;\n    const commentToAdd = {\n      ...newCommentData,\n      id: temporaryId,\n      postId: calculatePostId(optimisticComments.length + 1)\n    };\n    setNextCommentId(temporaryId + 1);\n    setOptimisticComments(currentComments => [...currentComments, commentToAdd]);\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(commentToAdd),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add comment');\n      }\n      const serverComment = await response.json();\n      setComments(currentComments => [...currentComments, serverComment]);\n      setOptimisticComments(currentComments => {\n        const updatedComments = currentComments.filter(comment => comment.id !== temporaryId);\n        return [...updatedComments, {\n          ...serverComment,\n          id: serverComment.id || temporaryId\n        }];\n      });\n    } catch (error) {\n      setOptimisticComments(currentComments => currentComments.filter(comment => comment.id !== temporaryId));\n      setNextCommentId(temporaryId);\n      if (error instanceof Error) {\n        setErrorMessage(error.message);\n      } else {\n        setErrorMessage('Failed to add comment');\n      }\n    }\n  };\n  const handleDeleteComments = async commentIdsToDelete => {\n    const commentsBackup = [...optimisticComments];\n    setOptimisticComments(currentComments => currentComments.filter(comment => !commentIdsToDelete.includes(comment.id)));\n    try {\n      const deleteResponses = await Promise.all(commentIdsToDelete.map(id => fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'DELETE'\n      })));\n      const allDeletesSuccessful = deleteResponses.every(response => response.ok);\n      if (!allDeletesSuccessful) {\n        throw new Error('Failed to delete some comments');\n      }\n      setComments(currentComments => currentComments.filter(comment => !commentIdsToDelete.includes(comment.id)));\n    } catch (error) {\n      setOptimisticComments(commentsBackup);\n      setErrorMessage(error instanceof Error ? error.message : 'Failed to delete comments');\n    }\n  };\n  const handleUpdateComment = async (commentId, updatedData) => {\n    const originalComment = optimisticComments.find(comment => comment.id === commentId);\n    setOptimisticComments(currentComments => currentComments.map(comment => comment.id === commentId ? {\n      ...comment,\n      ...updatedData\n    } : comment));\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${commentId}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updatedData),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update comment');\n      }\n      const updatedComment = await response.json();\n      setComments(currentComments => currentComments.map(comment => comment.id === commentId ? updatedComment : comment));\n    } catch (error) {\n      setOptimisticComments(currentComments => currentComments.map(comment => comment.id === commentId ? originalComment : comment));\n      setErrorMessage(error instanceof Error ? error.message : 'Failed to update comment');\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading comments...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }, this);\n  }\n  if (errorMessage) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", errorMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSet, {\n      data: optimisticComments,\n      onAdd: handleAddComment,\n      onDelete: handleDeleteComments,\n      onUpdate: handleUpdateComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentsApp, \"cFyiqNYQG8cMjjh362x7c1MpcMA=\");\n_c = CommentsApp;\nvar _c;\n$RefreshReg$(_c, \"CommentsApp\");","map":{"version":3,"names":["useState","useEffect","DataSet","jsxDEV","_jsxDEV","CommentsApp","_s","comments","setComments","optimisticComments","setOptimisticComments","isLoading","setIsLoading","errorMessage","setErrorMessage","nextCommentId","setNextCommentId","loadComments","response","fetch","ok","Error","commentsData","json","maxCommentId","reduce","max","comment","Math","id","error","message","calculatePostId","commentIndex","floor","handleAddComment","newCommentData","temporaryId","commentToAdd","postId","length","currentComments","method","body","JSON","stringify","headers","serverComment","updatedComments","filter","handleDeleteComments","commentIdsToDelete","commentsBackup","includes","deleteResponses","Promise","all","map","allDeletesSuccessful","every","handleUpdateComment","commentId","updatedData","originalComment","find","updatedComment","children","fileName","_jsxFileName","lineNumber","columnNumber","className","data","onAdd","onDelete","onUpdate","_c","$RefreshReg$"],"sources":["C:/Users/HUAWEI/visual_programming/dz08/src/App.js"],"sourcesContent":["// CommentsApp.js\nimport { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\n\nexport default function CommentsApp() {\n  const [comments, setComments] = useState([]);\n  const [optimisticComments, setOptimisticComments] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [nextCommentId, setNextCommentId] = useState(501); \n\n  useEffect(() => {\n    async function loadComments() {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments?_limit=100');\n        \n        if (!response.ok) {\n          throw new Error('Failed to load comments');\n        }\n        \n        const commentsData = await response.json();\n        setComments(commentsData);\n        setOptimisticComments(commentsData);\n        \n        const maxCommentId = commentsData.reduce((max, comment) => Math.max(max, comment.id), 0);\n        setNextCommentId(maxCommentId + 1);\n      } catch (error) {\n        if (error instanceof Error) {\n          setErrorMessage(error.message);\n        } else {\n          setErrorMessage('An unknown error occurred');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    loadComments();\n  }, []);\n\n  const calculatePostId = (commentIndex) => {\n    return Math.floor((commentIndex - 1) / 5) + 1;\n  };\n\n  const handleAddComment = async (newCommentData) => {\n    const temporaryId = nextCommentId;\n    const commentToAdd = { \n      ...newCommentData, \n      id: temporaryId,\n      postId: calculatePostId(optimisticComments.length + 1) \n    };\n    \n    setNextCommentId(temporaryId + 1); \n    setOptimisticComments(currentComments => [...currentComments, commentToAdd]);\n    \n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(commentToAdd),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to add comment');\n      }\n      \n      const serverComment = await response.json();\n      \n      setComments(currentComments => [...currentComments, serverComment]);\n      setOptimisticComments(currentComments => {\n        const updatedComments = currentComments.filter(comment => comment.id !== temporaryId);\n        return [...updatedComments, {...serverComment, id: serverComment.id || temporaryId}];\n      });\n    } catch (error) {\n      setOptimisticComments(currentComments => \n        currentComments.filter(comment => comment.id !== temporaryId)\n      );\n      setNextCommentId(temporaryId);\n      \n      if (error instanceof Error) {\n        setErrorMessage(error.message);\n      } else {\n        setErrorMessage('Failed to add comment');\n      }\n    }\n  };\n\n  const handleDeleteComments = async (commentIdsToDelete) => {\n    const commentsBackup = [...optimisticComments];\n    setOptimisticComments(currentComments => \n      currentComments.filter(comment => !commentIdsToDelete.includes(comment.id))\n    );\n    \n    try {\n      const deleteResponses = await Promise.all(\n        commentIdsToDelete.map(id => \n          fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n            method: 'DELETE',\n          })\n        )\n      );\n      \n      const allDeletesSuccessful = deleteResponses.every(response => response.ok);\n      if (!allDeletesSuccessful) {\n        throw new Error('Failed to delete some comments');\n      }\n      \n      setComments(currentComments => \n        currentComments.filter(comment => !commentIdsToDelete.includes(comment.id))\n      );\n    } catch (error) {\n      setOptimisticComments(commentsBackup);\n      setErrorMessage(error instanceof Error ? error.message : 'Failed to delete comments');\n    }\n  };\n\n  const handleUpdateComment = async (commentId, updatedData) => {\n    const originalComment = optimisticComments.find(comment => comment.id === commentId);\n    setOptimisticComments(currentComments => \n      currentComments.map(comment => \n        comment.id === commentId ? {...comment, ...updatedData} : comment\n      )\n    );\n    \n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${commentId}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updatedData),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update comment');\n      }\n      \n      const updatedComment = await response.json();\n      setComments(currentComments => \n        currentComments.map(comment => \n          comment.id === commentId ? updatedComment : comment\n        )\n      );\n    } catch (error) {\n      setOptimisticComments(currentComments => \n        currentComments.map(comment => \n          comment.id === commentId ? originalComment : comment\n        )\n      );\n      setErrorMessage(error instanceof Error ? error.message : 'Failed to update comment');\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading comments...</div>;\n  }\n\n  if (errorMessage) {\n    return <div>Error: {errorMessage}</div>;\n  }\n\n  return (\n    <div className=\"comments-app\">\n      <h1>Comments</h1>\n      <DataSet \n        data={optimisticComments}\n        onAdd={handleAddComment}\n        onDelete={handleDeleteComments}\n        onUpdate={handleUpdateComment}\n      />\n      {errorMessage && <div className=\"error\">{errorMessage}</div>}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}