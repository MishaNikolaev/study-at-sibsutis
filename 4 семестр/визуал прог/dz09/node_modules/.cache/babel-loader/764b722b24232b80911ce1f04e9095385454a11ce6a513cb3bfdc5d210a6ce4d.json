{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HUAWEI\\\\visual_programming\\\\dz08\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentsApp() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [optimisticComments, setOptimisticComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments?_limit=10');\n        if (!response.ok) throw new Error('Failed to fetch comments');\n        const data = await response.json();\n        setComments(data);\n        setOptimisticComments(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchComments();\n  }, []);\n  const handleAdd = async comment => {\n    const tempId = Date.now();\n    const newComment = {\n      ...comment,\n      id: tempId\n    };\n    setOptimisticComments(prev => [...prev, newComment]);\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(comment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to add comment');\n      const serverComment = await response.json();\n      setComments(prev => [...prev, serverComment]);\n      setOptimisticComments(prev => [...prev.filter(c => c.id !== tempId), serverComment]);\n    } catch (err) {\n      // Откатываем изменения при ошибке\n      setOptimisticComments(prev => prev.filter(c => c.id !== tempId));\n      setError(err instanceof Error ? err.message : 'Failed to add comment');\n    }\n  };\n\n  // Обработчик удаления комментариев (с оптимистичным обновлением)\n  const handleDelete = async ids => {\n    // Сохраняем копию для возможного отката\n    const backup = [...optimisticComments];\n\n    // Оптимистичное удаление\n    setOptimisticComments(prev => prev.filter(c => !ids.includes(c.id)));\n    try {\n      const responses = await Promise.all(ids.map(id => fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'DELETE'\n      })));\n      const allOk = responses.every(r => r.ok);\n      if (!allOk) throw new Error('Failed to delete some comments');\n\n      // Обновляем основное состояние\n      setComments(prev => prev.filter(c => !ids.includes(c.id)));\n    } catch (err) {\n      // Откатываем изменения при ошибке\n      setOptimisticComments(backup);\n      setError(err instanceof Error ? err.message : 'Failed to delete comments');\n    }\n  };\n\n  // Обработчик обновления комментария (с оптимистичным обновлением)\n  const handleUpdate = async (id, updates) => {\n    // Сохраняем оригинальный комментарий для отката\n    const original = optimisticComments.find(c => c.id === id);\n\n    // Оптимистичное обновление\n    setOptimisticComments(prev => prev.map(c => c.id === id ? {\n      ...c,\n      ...updates\n    } : c));\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to update comment');\n      const updatedComment = await response.json();\n\n      // Обновляем основное состояние\n      setComments(prev => prev.map(c => c.id === id ? updatedComment : c));\n    } catch (err) {\n      // Откатываем изменения при ошибке\n      setOptimisticComments(prev => prev.map(c => c.id === id ? original : c));\n      setError(err instanceof Error ? err.message : 'Failed to update comment');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading comments...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSet, {\n      data: optimisticComments,\n      onAdd: handleAdd,\n      onDelete: handleDelete,\n      onUpdate: handleUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentsApp, \"AG7jiaRHGmLZHCo027k4Jazb5uU=\");\n_c = CommentsApp;\nvar _c;\n$RefreshReg$(_c, \"CommentsApp\");","map":{"version":3,"names":["useState","useEffect","DataSet","jsxDEV","_jsxDEV","CommentsApp","_s","comments","setComments","optimisticComments","setOptimisticComments","loading","setLoading","error","setError","fetchComments","response","fetch","ok","Error","data","json","err","message","handleAdd","comment","tempId","Date","now","newComment","id","prev","method","body","JSON","stringify","headers","serverComment","filter","c","handleDelete","ids","backup","includes","responses","Promise","all","map","allOk","every","r","handleUpdate","updates","original","find","updatedComment","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onAdd","onDelete","onUpdate","_c","$RefreshReg$"],"sources":["C:/Users/HUAWEI/visual_programming/dz08/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\n\nexport default function CommentsApp() {\n  const [comments, setComments] = useState([]);\n  const [optimisticComments, setOptimisticComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments?_limit=10');\n        if (!response.ok) throw new Error('Failed to fetch comments');\n        const data = await response.json();\n        setComments(data);\n        setOptimisticComments(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchComments();\n  }, []);\n\n  const handleAdd = async (comment) => {\n    const tempId = Date.now();\n    const newComment = { ...comment, id: tempId };\n    \n    setOptimisticComments(prev => [...prev, newComment]);\n    \n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(comment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) throw new Error('Failed to add comment');\n      \n      const serverComment = await response.json();\n      setComments(prev => [...prev, serverComment]);\n      setOptimisticComments(prev => [\n        ...prev.filter(c => c.id !== tempId),\n        serverComment\n      ]);\n    } catch (err) {\n      // Откатываем изменения при ошибке\n      setOptimisticComments(prev => prev.filter(c => c.id !== tempId));\n      setError(err instanceof Error ? err.message : 'Failed to add comment');\n    }\n  };\n\n  // Обработчик удаления комментариев (с оптимистичным обновлением)\n  const handleDelete = async (ids) => {\n    // Сохраняем копию для возможного отката\n    const backup = [...optimisticComments];\n    \n    // Оптимистичное удаление\n    setOptimisticComments(prev => prev.filter(c => !ids.includes(c.id)));\n    \n    try {\n      const responses = await Promise.all(\n        ids.map(id => \n          fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n            method: 'DELETE',\n          })\n        )\n      );\n      \n      const allOk = responses.every(r => r.ok);\n      if (!allOk) throw new Error('Failed to delete some comments');\n      \n      // Обновляем основное состояние\n      setComments(prev => prev.filter(c => !ids.includes(c.id)));\n    } catch (err) {\n      // Откатываем изменения при ошибке\n      setOptimisticComments(backup);\n      setError(err instanceof Error ? err.message : 'Failed to delete comments');\n    }\n  };\n\n  // Обработчик обновления комментария (с оптимистичным обновлением)\n  const handleUpdate = async (id, updates) => {\n    // Сохраняем оригинальный комментарий для отката\n    const original = optimisticComments.find(c => c.id === id);\n    \n    // Оптимистичное обновление\n    setOptimisticComments(prev => \n      prev.map(c => c.id === id ? { ...c, ...updates } : c)\n    );\n    \n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) throw new Error('Failed to update comment');\n      \n      const updatedComment = await response.json();\n      \n      // Обновляем основное состояние\n      setComments(prev => \n        prev.map(c => c.id === id ? updatedComment : c)\n      );\n    } catch (err) {\n      // Откатываем изменения при ошибке\n      setOptimisticComments(prev => \n        prev.map(c => c.id === id ? original : c)\n      );\n      setError(err instanceof Error ? err.message : 'Failed to update comment');\n    }\n  };\n\n  if (loading) return <div>Loading comments...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className=\"comments-app\">\n      <h1>Comments</h1>\n      <DataSet \n        data={optimisticComments}\n        onAdd={handleAdd}\n        onDelete={handleDelete}\n        onUpdate={handleUpdate}\n      />\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}