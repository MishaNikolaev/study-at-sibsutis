{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HUAWEI\\\\visual_programming\\\\dz08\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentsApp() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Загрузка данных при монтировании\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n        if (!response.ok) throw new Error('Failed to fetch comments');\n        const data = await response.json();\n        setComments(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchComments();\n  }, []);\n\n  // Обработчик добавления комментария\n  const handleAdd = async comment => {\n    const tempId = Date.now(); // Временный ID для оптимистичного обновления\n\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(comment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to add comment');\n      const newComment = await response.json();\n      setComments(prev => [...prev, newComment]);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to add comment');\n    }\n  };\n\n  // Обработчик удаления комментариев\n  const handleDelete = async ids => {\n    try {\n      const responses = await Promise.all(ids.map(id => fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'DELETE'\n      })));\n      const allOk = responses.every(r => r.ok);\n      if (!allOk) throw new Error('Failed to delete some comments');\n      setComments(prev => prev.filter(c => !ids.includes(c.id)));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to delete comments');\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n      const data = await response.json();\n      setComments(data);\n    }\n  };\n\n  // Обработчик обновления комментария\n  const handleUpdate = async (id, updates) => {\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to update comment');\n      const updatedComment = await response.json();\n      setComments(prev => prev.map(c => c.id === id ? updatedComment : c));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update comment');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading comments...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSet, {\n      data: comments,\n      onAdd: handleAdd,\n      onDelete: handleDelete,\n      onUpdate: handleUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentsApp, \"9U0+ds+yqH5Twr7odiPeQomUgmg=\");\n_c = CommentsApp;\nvar _c;\n$RefreshReg$(_c, \"CommentsApp\");","map":{"version":3,"names":["useState","useEffect","DataSet","jsxDEV","_jsxDEV","CommentsApp","_s","comments","setComments","loading","setLoading","error","setError","fetchComments","response","fetch","ok","Error","data","json","err","message","handleAdd","comment","tempId","Date","now","method","body","JSON","stringify","headers","newComment","prev","handleDelete","ids","responses","Promise","all","map","id","allOk","every","r","filter","c","includes","handleUpdate","updates","updatedComment","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onAdd","onDelete","onUpdate","_c","$RefreshReg$"],"sources":["C:/Users/HUAWEI/visual_programming/dz08/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\n\nexport default function CommentsApp() {\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Загрузка данных при монтировании\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n        if (!response.ok) throw new Error('Failed to fetch comments');\n        const data = await response.json();\n        setComments(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchComments();\n  }, []);\n\n  // Обработчик добавления комментария\n  const handleAdd = async (comment) => {\n    const tempId = Date.now(); // Временный ID для оптимистичного обновления\n    \n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(comment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) throw new Error('Failed to add comment');\n      \n      const newComment = await response.json();\n      setComments(prev => [...prev, newComment]);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to add comment');\n    }\n  };\n\n  // Обработчик удаления комментариев\n  const handleDelete = async (ids) => {\n    try {\n      const responses = await Promise.all(\n        ids.map(id => \n          fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n            method: 'DELETE',\n          })\n        )\n      );\n      \n      const allOk = responses.every(r => r.ok);\n      if (!allOk) throw new Error('Failed to delete some comments');\n      \n      setComments(prev => prev.filter(c => !ids.includes(c.id)));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to delete comments');\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n      const data = await response.json();\n      setComments(data);\n    }\n  };\n\n  // Обработчик обновления комментария\n  const handleUpdate = async (id, updates) => {\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) throw new Error('Failed to update comment');\n      \n      const updatedComment = await response.json();\n      setComments(prev => \n        prev.map(c => c.id === id ? updatedComment : c)\n      );\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update comment');\n    }\n  };\n\n  if (loading) return <div>Loading comments...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className=\"comments-app\">\n      <h1>Comments</h1>\n      <DataSet \n        data={comments}\n        onAdd={handleAdd}\n        onDelete={handleDelete}\n        onUpdate={handleUpdate}\n      />\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}