{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HUAWEI\\\\visual_programming\\\\dz08\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentsApp() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [optimisticComments, setOptimisticComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchComments() {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n        if (!response.ok) {\n          throw new Error('Failed to fetch comments');\n        }\n        const data = await response.json();\n        setComments(data);\n        setOptimisticComments(data);\n      } catch (err) {\n        if (err instanceof Error) {\n          setError(err.message);\n        } else {\n          setError('Unknown error');\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchComments();\n  }, []);\n  const handleAdd = async comment => {\n    const tempId = nextId;\n    const newComment = {\n      ...comment,\n      id: tempId,\n      postId: calculatePostId(optimisticComments.length + 1) // Calculate proper postId\n    };\n    setNextId(tempId + 1); // Increment for next addition\n    setOptimisticComments(prev => [...prev, newComment]);\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(newComment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add comment');\n      }\n      const serverComment = await response.json();\n      setComments(prev => [...prev, serverComment]);\n      setOptimisticComments(prev => {\n        const filtered = prev.filter(c => c.id !== tempId);\n        return [...filtered, serverComment];\n      });\n    } catch (err) {\n      setOptimisticComments(prev => prev.filter(c => c.id !== tempId));\n      setNextId(tempId); // Rollback ID on failure\n\n      if (err instanceof Error) {\n        setError(err.message);\n      } else {\n        setError('Failed to add comment');\n      }\n    }\n  };\n  const handleDelete = async ids => {\n    const backup = [...optimisticComments];\n    setOptimisticComments(prevComments => prevComments.filter(c => !ids.includes(c.id)));\n    try {\n      const responses = await Promise.all(ids.map(id => fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'DELETE'\n      })));\n      const allOk = responses.every(r => r.ok);\n      if (!allOk) {\n        throw new Error('Failed to delete some comments');\n      }\n      setComments(prevComments => prevComments.filter(c => !ids.includes(c.id)));\n    } catch (err) {\n      setOptimisticComments(backup);\n      if (err instanceof Error) {\n        setError(err.message);\n      } else {\n        setError('Failed to delete comments');\n      }\n    }\n  };\n  const handleUpdate = async (id, updates) => {\n    const original = optimisticComments.find(c => c.id === id);\n    setOptimisticComments(prevComments => {\n      return prevComments.map(c => {\n        if (c.id === id) {\n          return {\n            ...c,\n            ...updates\n          };\n        }\n        return c;\n      });\n    });\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update comment');\n      }\n      const updatedComment = await response.json();\n      setComments(prevComments => {\n        return prevComments.map(c => {\n          if (c.id === id) {\n            return updatedComment;\n          }\n          return c;\n        });\n      });\n    } catch (err) {\n      setOptimisticComments(prevComments => {\n        return prevComments.map(c => {\n          if (c.id === id) {\n            return original;\n          }\n          return c;\n        });\n      });\n      if (err instanceof Error) {\n        setError(err.message);\n      } else {\n        setError('Failed to update comment');\n      }\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Glebasik uffff...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"I'm stupid coder and my code ending with error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSet, {\n      data: optimisticComments,\n      onAdd: handleAdd,\n      onDelete: handleDelete,\n      onUpdate: handleUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentsApp, \"AG7jiaRHGmLZHCo027k4Jazb5uU=\");\n_c = CommentsApp;\nvar _c;\n$RefreshReg$(_c, \"CommentsApp\");","map":{"version":3,"names":["useState","useEffect","DataSet","jsxDEV","_jsxDEV","CommentsApp","_s","comments","setComments","optimisticComments","setOptimisticComments","loading","setLoading","error","setError","fetchComments","response","fetch","ok","Error","data","json","err","message","handleAdd","comment","tempId","nextId","newComment","id","postId","calculatePostId","length","setNextId","prev","method","body","JSON","stringify","headers","serverComment","filtered","filter","c","handleDelete","ids","backup","prevComments","includes","responses","Promise","all","map","allOk","every","r","handleUpdate","updates","original","find","updatedComment","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onAdd","onDelete","onUpdate","_c","$RefreshReg$"],"sources":["C:/Users/HUAWEI/visual_programming/dz08/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\n\nexport default function CommentsApp() {\n  const [comments, setComments] = useState([]);\n  const [optimisticComments, setOptimisticComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchComments() {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch comments');\n        }\n        \n        const data = await response.json();\n        setComments(data);\n        setOptimisticComments(data);\n      } catch (err) {\n        if (err instanceof Error) {\n          setError(err.message);\n        } else {\n          setError('Unknown error');\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchComments();\n  }, []);\n\n  const handleAdd = async (comment) => {\n    const tempId = nextId;\n    const newComment = { \n      ...comment, \n      id: tempId,\n      postId: calculatePostId(optimisticComments.length + 1) // Calculate proper postId\n    };\n    \n    setNextId(tempId + 1); // Increment for next addition\n    setOptimisticComments(prev => [...prev, newComment]);\n    \n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(newComment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to add comment');\n      }\n      \n      const serverComment = await response.json();\n      \n      setComments(prev => [...prev, serverComment]);\n      setOptimisticComments(prev => {\n        const filtered = prev.filter(c => c.id !== tempId);\n        return [...filtered, serverComment];\n      });\n    } catch (err) {\n      setOptimisticComments(prev => prev.filter(c => c.id !== tempId));\n      setNextId(tempId); // Rollback ID on failure\n      \n      if (err instanceof Error) {\n        setError(err.message);\n      } else {\n        setError('Failed to add comment');\n      }\n    }\n  };\n\n  const handleDelete = async (ids) => {\n    const backup = [...optimisticComments];\n    \n    setOptimisticComments(prevComments => prevComments.filter(c => !ids.includes(c.id)));\n    \n    try {\n      const responses = await Promise.all(\n        ids.map(id => \n          fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n            method: 'DELETE',\n          })\n        )\n      );\n      \n      const allOk = responses.every(r => r.ok);\n      if (!allOk) {\n        throw new Error('Failed to delete some comments');\n      }\n      \n      setComments(prevComments => prevComments.filter(c => !ids.includes(c.id)));\n    } catch (err) {\n      setOptimisticComments(backup);\n      \n      if (err instanceof Error) {\n        setError(err.message);\n      } else {\n        setError('Failed to delete comments');\n      }\n    }\n  };\n\n  const handleUpdate = async (id, updates) => {\n    const original = optimisticComments.find(c => c.id === id);\n    \n    setOptimisticComments(prevComments => {\n      return prevComments.map(c => {\n        if (c.id === id) {\n          return { ...c, ...updates };\n        }\n        return c;\n      });\n    });\n    \n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update comment');\n      }\n      \n      const updatedComment = await response.json();\n      \n      setComments(prevComments => {\n        return prevComments.map(c => {\n          if (c.id === id) {\n            return updatedComment;\n          }\n          return c;\n        });\n      });\n    } catch (err) {\n      setOptimisticComments(prevComments => {\n        return prevComments.map(c => {\n          if (c.id === id) {\n            return original;\n          }\n          return c;\n        });\n      });\n      \n      if (err instanceof Error) {\n        setError(err.message);\n      } else {\n        setError('Failed to update comment');\n      }\n    }\n  };\n\n  if (loading) {\n    return <div>Glebasik uffff...</div>;\n  }\n\n  if (error) {\n    return <div>I'm stupid coder and my code ending with error: {error}</div>;\n  }\n\n  return (\n    <div className=\"comments-app\">\n      <h1>Comments</h1>\n      <DataSet \n        data={optimisticComments}\n        onAdd={handleAdd}\n        onDelete={handleDelete}\n        onUpdate={handleUpdate}\n      />\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}