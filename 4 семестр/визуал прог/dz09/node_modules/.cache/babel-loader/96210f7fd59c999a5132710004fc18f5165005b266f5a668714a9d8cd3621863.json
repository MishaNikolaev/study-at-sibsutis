{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HUAWEI\\\\visual_programming\\\\dz08\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentsApp() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [optimisticComments, setOptimisticComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [nextId, setNextId] = useState(501);\n  useEffect(() => {\n    async function fetchComments() {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n        if (!response.ok) {\n          throw new Error('жёсткий фейл Глебыча');\n        }\n        const data = await response.json();\n        setComments(data);\n        setOptimisticComments(data);\n        const maxId = data.reduce((max, comment) => Math.max(max, comment.id), 0);\n        setNextId(maxId + 1);\n      } catch (err) {\n        if (err instanceof Error) {\n          setError(err.message);\n        } else {\n          setError('error произошёл ');\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchComments();\n  }, []);\n  const calculatePostId = index => {\n    return Math.floor((index - 1) / 5) + 1;\n  };\n  const handleAdd = async comment => {\n    const tempId = nextId;\n    const newComment = {\n      ...comment,\n      id: tempId,\n      postId: calculatePostId(optimisticComments.length + 1)\n    };\n    setNextId(tempId + 1);\n    setOptimisticComments(prev => [...prev, newComment]);\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(newComment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('фейл ёмаё');\n      }\n      const serverComment = await response.json();\n      setComments(prev => [...prev, serverComment]);\n      setOptimisticComments(prev => {\n        const filtered = prev.filter(c => c.id !== tempId);\n        return [...filtered, serverComment];\n      });\n    } catch (err) {\n      setOptimisticComments(prev => prev.filter(c => c.id !== tempId));\n      setNextId(tempId);\n      if (err instanceof Error) {\n        setError(err.message);\n      } else {\n        setError('фейл');\n      }\n    }\n  };\n  const handleDelete = async ids => {\n    const backup = [...optimisticComments];\n    setOptimisticComments(prev => prev.filter(c => !ids.includes(c.id)));\n    try {\n      const responses = await Promise.all(ids.map(id => fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'DELETE'\n      })));\n      const allOk = responses.every(r => r.ok);\n      if (!allOk) {\n        throw new Error('fail');\n      }\n      setComments(prev => prev.filter(c => !ids.includes(c.id)));\n    } catch (err) {\n      setOptimisticComments(backup);\n      setError(err instanceof Error ? err.message : 'Failed to delete comments');\n    }\n  };\n  const handleUpdate = async (id, updates) => {\n    const original = optimisticComments.find(c => c.id === id);\n    setOptimisticComments(prev => prev.map(c => c.id === id ? {\n      ...c,\n      ...updates\n    } : c));\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update comment');\n      }\n      const updatedComment = await response.json();\n      setComments(prev => prev.map(c => c.id === id ? updatedComment : c));\n    } catch (err) {\n      setOptimisticComments(prev => prev.map(c => c.id === id ? original : c));\n      setError(err instanceof Error ? err.message : 'Failed to update comment');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0413\\u043B\\u0435\\u0431\\u0430\\u0441\\u0438\\u043A \\u043B\\u0435\\u0433\\u0435\\u043D\\u0434\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSet, {\n      data: optimisticComments,\n      onAdd: handleAdd,\n      onDelete: handleDelete,\n      onUpdate: handleUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentsApp, \"7bovQpdm7j3RRb/EjGxARjES2Wo=\");\n_c = CommentsApp;\nvar _c;\n$RefreshReg$(_c, \"CommentsApp\");","map":{"version":3,"names":["useState","useEffect","DataSet","jsxDEV","_jsxDEV","CommentsApp","_s","comments","setComments","optimisticComments","setOptimisticComments","loading","setLoading","error","setError","nextId","setNextId","fetchComments","response","fetch","ok","Error","data","json","maxId","reduce","max","comment","Math","id","err","message","calculatePostId","index","floor","handleAdd","tempId","newComment","postId","length","prev","method","body","JSON","stringify","headers","serverComment","filtered","filter","c","handleDelete","ids","backup","includes","responses","Promise","all","map","allOk","every","r","handleUpdate","updates","original","find","updatedComment","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onAdd","onDelete","onUpdate","_c","$RefreshReg$"],"sources":["C:/Users/HUAWEI/visual_programming/dz08/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\n\nexport default function CommentsApp() {\n  const [comments, setComments] = useState([]);\n  const [optimisticComments, setOptimisticComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [nextId, setNextId] = useState(501); \n\n  useEffect(() => {\n    async function fetchComments() {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n        \n        if (!response.ok) {\n          throw new Error('жёсткий фейл Глебыча');\n        }\n        \n        const data = await response.json();\n        setComments(data);\n        setOptimisticComments(data);\n        \n        const maxId = data.reduce((max, comment) => Math.max(max, comment.id), 0);\n        setNextId(maxId + 1);\n      } catch (err) {\n        if (err instanceof Error) {\n          setError(err.message);\n        } else {\n          setError('error произошёл ');\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchComments();\n  }, []);\n\n  const calculatePostId = (index) => {\n    return Math.floor((index - 1) / 5) + 1;\n  };\n\n  const handleAdd = async (comment) => {\n    const tempId = nextId;\n    const newComment = { \n      ...comment, \n      id: tempId,\n      postId: calculatePostId(optimisticComments.length + 1) \n    };\n    \n    setNextId(tempId + 1); \n    setOptimisticComments(prev => [...prev, newComment]);\n    \n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(newComment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('фейл ёмаё');\n      }\n      \n      const serverComment = await response.json();\n      \n      setComments(prev => [...prev, serverComment]);\n      setOptimisticComments(prev => {\n        const filtered = prev.filter(c => c.id !== tempId);\n        return [...filtered, serverComment];\n      });\n    } catch (err) {\n      setOptimisticComments(prev => prev.filter(c => c.id !== tempId));\n      setNextId(tempId); \n      \n      if (err instanceof Error) {\n        setError(err.message);\n      } else {\n        setError('фейл');\n      }\n    }\n  };\n\n  const handleDelete = async (ids) => {\n    const backup = [...optimisticComments];\n    setOptimisticComments(prev => prev.filter(c => !ids.includes(c.id)));\n    \n    try {\n      const responses = await Promise.all(\n        ids.map(id => \n          fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n            method: 'DELETE',\n          })\n        )\n      );\n      \n      const allOk = responses.every(r => r.ok);\n      if (!allOk) {\n        throw new Error('fail');\n      }\n      \n      setComments(prev => prev.filter(c => !ids.includes(c.id)));\n    } catch (err) {\n      setOptimisticComments(backup);\n      setError(err instanceof Error ? err.message : 'Failed to delete comments');\n    }\n  };\n\n  const handleUpdate = async (id, updates) => {\n    const original = optimisticComments.find(c => c.id === id);\n    setOptimisticComments(prev => prev.map(c => c.id === id ? {...c, ...updates} : c));\n    \n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update comment');\n      }\n      \n      const updatedComment = await response.json();\n      setComments(prev => prev.map(c => c.id === id ? updatedComment : c));\n    } catch (err) {\n      setOptimisticComments(prev => prev.map(c => c.id === id ? original : c));\n      setError(err instanceof Error ? err.message : 'Failed to update comment');\n    }\n  };\n\n  if (loading) {\n    return <div>Глебасик легенда...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"comments-app\">\n      <h1>Comments</h1>\n      <DataSet \n        data={optimisticComments}\n        onAdd={handleAdd}\n        onDelete={handleDelete}\n        onUpdate={handleUpdate}\n      />\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}